# How quick is the computation depends on the defined graded polynomial ring
# For tests I would recommend defining S=Q[x0,x1]
%
Read( "../stable_cat_of_glp_over_exterior_algebra.g" );
%
S;
%
A;
%
graded_lp_cat_sym;
%
cochains_graded_lp_cat_sym;
%
graded_lp_cat_ext;
%
cochains_graded_lp_cat_ext;
%
coh;
%
cochains_coh;
%
m := RandomMatrixBetweenGradedFreeLeftModules([4],[1,2,1,2,3],S);
%
M := AsGradedLeftPresentation(m,[1,2,1,2,3]);
%
n := RandomMatrixBetweenGradedFreeLeftModules([4,5],[1,2,1,2],S);
%
N := AsGradedLeftPresentation(n,[1,2,1,2]);
%
G := GeneratorsOfExternalHom(M,N);
%
f := Random(G);
%
CohomologyOfBeilinsonComplexToSheafification;
%
FF := Source( CohomologyOfBeilinsonComplexToSheafification );
%
GG := Range( CohomologyOfBeilinsonComplexToSheafification );
%
FF_f := ApplyFunctor( FF, f );
%
GG_f := ApplyFunctor( GG, f );
%
mu_M := ApplyNaturalTransformation( CohomologyOfBeilinsonComplexToSheafification, M );
%
mu_N := ApplyNaturalTransformation( CohomologyOfBeilinsonComplexToSheafification, N );
%
IsWellDefined( mu_M );
%
IsWellDefined( mu_N );
%
IsIsomorphism( mu_M );
%
IsIsomorphism( mu_N );
%
p1 := PreCompose( mu_M, GG_f );
%
p2 := PreCompose( FF_f, mu_N );
%
IsCongruentForMorphisms(p1,p2);
%
Beilinson_sym_M := ApplyFunctor( Beilinson_complex_sym, M );
%
IsWellDefined( Beilinson_sym_M, -3, 3 );
%
Display( Beilinson_sym_M, -3, 3 );
%
Beilinson_sym_f := ApplyFunctor( Beilinson_complex_sym, f );
%
IsWellDefined( Beilinson_sym_f, -3, 3 );
%
Display( Beilinson_sym_f, -3, 3 );
%
Beilinson_Serre_v2 := ApplyFunctor( Beilinson_complex_Serre_v2, M );
%
